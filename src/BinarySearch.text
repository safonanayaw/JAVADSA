Binary Search
The algorithm that find the position of a target value within a sorted array
The algorithm eliminate half of the array in each "steps"

Runtime Complexity is 0(log n)
ADV
Good for search on large data sets

DISADV
Bad for search on small data sets

Example of binary search
import java.util.ArrayList;
import java.util.LinkedList;



public class Main {
    public static void main(String[] args) {

        int[] array = new int[100];
        int target = 42;

        for(int i = 0; i < array.length; i++){
            array[i] = i;
        }

        int index = binarySearch(array, 20);

        if(index == -1) {
            System.out.println(target + "not found");
        }else{
            System.out.println("Target found at index: " + index);
        }

    }

    public static int binarySearch(int[] array, int target){
        int low = 0;
        int high = array.length -1;

        while(low < high){
            int middle = low + (high - low)/2;
            int value = array[middle];

            System.out.println("Middle number: " + value);
            if(value < target) low = middle + 1;
            else if(value > target) high = middle -1;
            else return middle; // target is found
        }
        return -1; // target not found
    }

}