SINGLE LINKED LIST
LIFO
are nodes with value and address to the next node where
the head points to the address of next node and the tail has null address to the next node.
They Linked list store the memory location of the head and tail.
Nodes are in non-consecutive memory locations.
Elements are linked using pointers.

[value | address] -> [value | address]

ADVANTAGE
Insertion and deletion of nodes is easy/ O(1)
Dynamic data structure(allocate memory while running)
No/ Low memory waste.


DISADVANTAGE
Accessing/ Searching of elements is more time consuming. / O(n)
No random access of elements(No index [i])
Greater memory usage(additional pointer)

Uses.
Implements Stacks / Queues
GPS navigating
Music playlist

eg,         LinkedList<String> list = new LinkedList<>();
    //        linked list can behave as a stack
    //        list.push("A");
    //        list.push("B");
    //        list.push("C");
    //        list.push("D");
    //        list.push("E");
              System.out.println(list)
              [E D, C, B, A]
                  E is the head
                  A is the Tail

              list.pop();
              System.out.println(list)
              [D, C, B, A]


***********************************************************
DOUBLE LINKED LIST
They are node with value and address of previous and next node.

[address | value | address] <-> [address | value | address]

ADVANTAGE
Double linked list are good in transversing through the linked list
since the address to the previous and next is stored by the nodes.
DISADVANTAGE
Greater memory usage


Static Array
They are arrays with fixed capacity which is determine after runtime which the array size cant me altered.


Dynamic Array
Are array with dynamic capacity which can be altered when more space is needed
Memory locations are contigeous
Dynamic arrays are called
Python -> List
Javascript -> Array
Java -> ArrayList
C++ -> Vector
ADV
1.Random access of element O(1)
2.Good locality of reference and data cache utilization
3.Easy to insert / delete at the end

DISADV
1.Waste more memory
2.Shrinking/Expanding is time consuming O(n)
3.Shifting elements is time consuming O(1)
